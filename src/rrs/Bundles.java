/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rrs;

import Database.DBConnection;
import java.awt.Image;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */
public class Bundles extends javax.swing.JFrame {

    /**
     * Creates new form Bundles
     */
    public Bundles() {
        initComponents();
        loadBundles();
    }
    
    private void loadBundles() {
        DefaultTableModel model = (DefaultTableModel) tbBundles.getModel();
        model.setRowCount(0);

        try (Connection conn = DBConnection.Connect(); PreparedStatement ps = conn.prepareStatement("SELECT bundle_id, bundle_name, price, image_path FROM bundles"); ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                model.addRow(new Object[]{rs.getInt("bundle_id"), rs.getString("bundle_name"), "PHP " + rs.getDouble("price")});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        }
    }

    private void loadBundleItems(int bundleId) {
        DefaultTableModel model = (DefaultTableModel) tbItems.getModel();
        model.setRowCount(0);

        try (Connection conn = DBConnection.Connect(); PreparedStatement ps = conn.prepareStatement(
                "SELECT m.item_name, m.price, m.image_path FROM bundle_items bi "
                + "INNER JOIN menu m ON bi.menu_id = m.menu_id WHERE bi.bundle_id = ?")) {

            ps.setInt(1, bundleId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    model.addRow(new Object[]{rs.getString("item_name"), "PHP " + rs.getDouble("price")});
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        }
    }

    private void showBundleImage() {
        int row = tbBundles.getSelectedRow();
        if (row == -1) {
            return;
        }

        int bundleId = (int) tbBundles.getValueAt(row, 0);

        try (Connection conn = DBConnection.Connect(); PreparedStatement ps = conn.prepareStatement("SELECT image_path FROM bundles WHERE bundle_id = ?")) {

            ps.setInt(1, bundleId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String imagePath = "src/assets/" + rs.getString("image_path") + ".png";
                    lblBundleImage.setIcon(new ImageIcon(new ImageIcon(imagePath).getImage().getScaledInstance(280, 200, Image.SCALE_SMOOTH)));
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        }
    }

    private void showItemImage() {
        int row = tbItems.getSelectedRow();
        if (row == -1) {
            return;
        }

        String itemName = tbItems.getValueAt(row, 0).toString();

        try (Connection conn = DBConnection.Connect(); PreparedStatement ps = conn.prepareStatement("SELECT image_path FROM menu WHERE item_name = ?")) {

            ps.setString(1, itemName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    String imagePath = "src/assets/" + rs.getString("image_path") + ".png";
                    lblItems.setIcon(new ImageIcon(new ImageIcon(imagePath).getImage().getScaledInstance(280, 200, Image.SCALE_SMOOTH)));
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbMenuCategory = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbBundles = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbItems = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        lblBundleImage = new javax.swing.JLabel();
        lblItems = new javax.swing.JLabel();

        cbMenuCategory.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        cbMenuCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMenuCategoryActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bundles");

        jPanel1.setBackground(new java.awt.Color(250, 250, 250));

        tbBundles.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tbBundles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Bundle", "Price"
            }
        ));
        tbBundles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tbBundles.setRowHeight(30);
        tbBundles.getTableHeader().setResizingAllowed(false);
        tbBundles.getTableHeader().setReorderingAllowed(false);
        tbBundles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbBundlesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbBundles);
        if (tbBundles.getColumnModel().getColumnCount() > 0) {
            tbBundles.getColumnModel().getColumn(0).setMinWidth(50);
            tbBundles.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        jLabel1.setFont(new java.awt.Font("Crimson Pro", 1, 24)); // NOI18N
        jLabel1.setText("Bundles");

        tbItems.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tbItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Item", "Price"
            }
        ));
        tbItems.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tbItems.setRowHeight(30);
        tbItems.getTableHeader().setResizingAllowed(false);
        tbItems.getTableHeader().setReorderingAllowed(false);
        tbItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbItemsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbItems);

        jLabel2.setFont(new java.awt.Font("Crimson Pro", 1, 24)); // NOI18N
        jLabel2.setText("Items");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblItems, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addComponent(lblBundleImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblBundleImage, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbMenuCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMenuCategoryActionPerformed
        
    }//GEN-LAST:event_cbMenuCategoryActionPerformed

    private void tbBundlesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbBundlesMouseClicked
        int row = tbBundles.getSelectedRow();
        if (row != -1) {
            int bundleId = (int) tbBundles.getValueAt(row, 0);
            loadBundleItems(bundleId);
            showBundleImage();
        }
    }//GEN-LAST:event_tbBundlesMouseClicked

    private void tbItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbItemsMouseClicked
        showItemImage();
    }//GEN-LAST:event_tbItemsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bundles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bundles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bundles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bundles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Bundles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbMenuCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBundleImage;
    private javax.swing.JLabel lblItems;
    public javax.swing.JTable tbBundles;
    private javax.swing.JTable tbItems;
    // End of variables declaration//GEN-END:variables
}
